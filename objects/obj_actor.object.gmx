<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "idle" 

army = BLUE_ARMY;

gridX = 0;
gridY = 0;

name = "Error";

class = "Peasant";

race = "Human";

//Character statistics

level = 1;

//Base statistics
profMod = 2 + floor(level/5);

conMod = 0;
defMod = 0;
resMod = 0;
dexMod = 0;
strMod = 0;
magMod = 0;

//Equipment variables
atkMod = 0;
spellMod = 0;
armorMod = 0;
resistMod = 0;

//Health variables
maxHitPoints = 4 + conMod + (level - 1) * (3 + conMod);
hitPoints = maxHitPoints;

//Attack variables
attackType = "melee";
attackTarget = noone;
actionTimer = 0;
critChance = 20;
critMod = 1.5;

//Damage variables
damageType = "piercing";
baseDmg = profMod + strMod;
equipDmg = baseDmg + atkMod;

//Defensive variables
baseDef = profMod + defMod;
baseRes = profMod + resMod;

//Move and action Variables
move = 6;
actions = 2;
canAct = false;


//initiative variables
initiative = dexMod;
initRoll = 0;

//variables related to buttons
defaultActions = ds_list_create();

ds_list_add(defaultActions, "end turn");

//spell and action variables
spellHit = 0;

firstLevelSlotMax = 0;
firstLevelSlot = 0;

readiedAction = "error";
targetingType = "error";
actionRange = 0;

//Pathing
movementPath = path_add();
path_set_kind(movementPath, 2);
path_set_closed(movementPath, false);   

moveSpeed = 8;

endPath = "idle";

//Buffs
bless = 0;

//Effects
shake = 0;
shakeMag = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake -= 1;

switch(state){
    
    case "initialize turn":
        if(bless &gt; obj_control.roundCounter){
            with(instance_create(x, y, obj.bless)){
                target = other;
            }
        }
        else{
            bless = 0;
        }
        
        if(army == BLUE_ARMY){
            movement_range(map[gridX, gridY], move, actions);
            
            switch(attackType){
                case "melee":
                    melee_attack_range(id);
                    
                    break;
                
                case "ranged":
                    ranged_attack_range(id);
                    
                    break;
            }
            
            obj_cursor.selectedActor = id;
        }
        else{
            flash = true;
            alarm[0] = 20;
        }
        
        state = "ready";
        
        break;
    
    case "begin path":
        //Begin moving
        path_start(movementPath, moveSpeed, 0 , true);
        
        state = "moving";
        
        break;
    
    case "begin attack":
        actionTimer -= 1;
        if(actionTimer &lt;= 0){
            state = "attack";
        }
        
        break;
    
    case "attack":
        hitMod = 1.25;
        critRoll = irandom_range(1, critChance);
        if(critRoll = 1){
            attackStatus = "crit";
        }
        hitChance = max(95, 70 + (dexMod - attackTarget.dexMod) * hitMod);
        if(random_range(1, 100) &lt;= hitChance){
            attackStatus = "hit";
        }
        else{
            attackStatus = "miss";
        }
        
        attackDamage = attack_apply(id, attackTarget);
        
        if(attackStatus = "crit"){
            attackDamage *= 1.5;
        }
                
        if(attackStatus == "crit"){
            attackTarget.shake = 8;
            attackTarget.shakeMag = 8;
        }else{
            attackTarget.shake = 4;
            attackTarget.shakeMag = 4;
        }
        
        switch(attackType){
            case "ranged":
             
                attackDir = point_direction(x + 32, y + 32, attackTarget.x + 32, attackTarget.y + 32);
                
                beginX = x + 32 + lengthdir_x(30, attackDir);
                beginY = y + 32 + lengthdir_y(30, attackDir);
                
                with(instance_create(beginX, beginY, obj_Arrow)){
                    target = other.attackTarget;
                    status = other.attackStatus;
                    damage = other.attackDamage;
                    damageType = other.damageType;
                    
                    path_add_point(movementPath, x, y, 100);
                    
                    if(status != "miss"){
                        path_add_point(movementPath, target.x + 32, target.y + 32, 100);
                        
                    }
                    else{
                        path_add_point(movementPath, target.x + (irandom_range(60, 100) * choose(-1, 1)), target.y + (irandom_range(60, 100) * choose(-1, 1)), 100);
                    }
                    
                    path_start(movementPath, speed, true, true);
                }
                
                state = "end attack";
                
                actionTimer = 30;
                
                break;
                
                case "melee":
                    if(attackStatus != "miss"){
                        for(ii = 0; ii &lt; 6; ii += 1){
                            with(instance_create(attackTarget.x + 16, attackTarget.y + 16, obj_Biff)){
                                direction = irandom(360);
                                speed = choose(2, 4);
                                scale = choose(2, 3);
                                
                                image_speed = 0.5;
                                
                                if(other.attackStatus == "crit"){
                                    color = c_yellow;
                                }
                                
                            }
                            
                        }
                        
                        attackTarget.hitPoints -= attackDamage;
                        
                        with(instance_create(attackTarget.x + 28, attackTarget.y + 2, obj_DamageText)){
                            text = "-" + string(other.attackDamage);
                            
                            ground = y;
                            
                            if(other.attackStatus == "crit"){
                                font = f_Crit; 
                            }
                            
                        }
                        
                    }else{
                        with(instance_create(attackTarget.x +28, attackTarget.y +2,obj_DamageText)){
                            text = "miss"
                            
                            ground = y;
                        }
                
                }
                                                       
                state = "end attack";
                    
                break;
            
        }
        
        break; 
    
    case "end attack":
            actionTimer -=1;
            
            if(actionTimer &lt;= 0){
                if(actions &gt; 0){
                    obj_cursor.selectedActor = id;
                    
                    movement_range(map[gridX, gridY], move, actions);
                }
                else{
                    obj_control.currentActor = noone;
                }
                
                state = "idle";
            }
        break; 
        
    case "begin action":
        wipe_nodes();
        action_targeting(id, targetingType, actionRange);
        break;
        
    case "perform action":
        
        perform_action(id, readiedAction);
        
        wipe_nodes();
        break;
    
    case "end action":
        actionTimer -= 1;
        
        if(actionTimer&lt;=0)
        {
        state = "idle";
        }
        if(actions &gt; 0)
        {
         movement_range(map[gridX, gridY], move, actions);
        }
        else
        {
        state = "idle";
        obj_cursor.selectedActor = noone;
        obj_control.currentActor = noone;
        }
        break;
    
    case "end turn":
        actionTimer=-1;
        if(actionTimer &lt;=0)
        {
            obj_cursor.selectedActor = noone;
            obj_control.currentActor = noone;
            state = "idle";
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Clear path
path_clear_points(movementPath);

if(endPath == "ready"){
    state = "idle"
    
    if(actions &gt; 0){
        obj_cursor.selectedActor = id;
        movement_range(map[gridX, gridY], move, actions);
        
        if(canAct){
            switch(attackType){
                case "ranged":
                    ranged_attack_range(id);
                    break;
                    
                case "melee":
                    melee_attack_range(id);
                    break;
            }
        }
        
    }else{
        obj_control.currentActor = noone;
    }
}else{
    state = endPath;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If cursor is hovering over a different node than actor's
if(obj_cursor.selectedActor == id &amp;&amp; obj_cursor.hoverNode != noone){ 
    if(obj_cursor.hoverNode != noone){
        tempNode = obj_cursor.hoverNode;
        if(tempNode.moveNode){
            current = tempNode;
        
            //Tracking line back to actor
            while(current.parent != noone){
                draw_line_width_colour(current.x + 32, current.y + 32, current.parent.x + 32, current.parent.y + 32, 4, c_lime, c_lime);
             
                current = current.parent;
            }
        }
        
        if(tempNode.attackNode){
            switch(attackType){
                case "ranged":
                    draw_line_width_colour(x + 32, y + 32, tempNode.x + 32, tempNode.y + 32, 4, c_purple, c_purple);
                    break;
                    
                case "melee":
                    tempX = abs(tempNode.gridX - gridX);
                    tempY = abs(tempNode.gridY - gridY);
                    
                    if(tempX &lt;= 1 &amp;&amp;tempY &lt;= 1){
                        draw_line_width_colour(x + 16, y + 16, tempNode.x + 16, tempNode.y +16, 4, c_purple, c_purple);
                    }else{
                        current = noone;
                        tempG = 100;
                        
                        for(ii = 0; ii &lt; ds_list_size(tempNode.neighbors); ii += 1){
                            neighbor = ds_list_find_value(tempNode.neighbors, ii);
                            
                            if(neighbor.occupant == noone &amp;&amp; neighbor.G &gt; 0 &amp;&amp; neighbor.G &lt; tempG){
                                tempG = neighbor.G;
                                current = neighbor;
                                
                            }
                        }
                        
                        draw_line_width_colour(tempNode.x + 16, tempNode.y + 16, current.x + 16, current.y + 16, 4, c_purple, c_purple);
                        
                        while(current.parent != noone){
                            draw_line_width_colour(current.x + 16, current.y + 16, current.parent.x +16, current.parent.y + 16, 4, c_purple, c_purple);
                            
                            current = current.parent; 
                        
                        } 
                    }
                    break;
            }
        }
    }
}

if(shake &gt; 0){
    draw_sprite_ext(sprite_index, -1, x + irandom_range(-shakeMag, shakeMag), y + irandom_range(-shakeMag, shakeMag), 1, 1, 0, c_white, 1);
}
else{
    draw_self();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
