<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "idle" 

army = BLUE_ARMY;

gridX = 0;
gridY = 0;

name = "Error";

class = "Peasant";

race = "Human";

//Character statistics

level = 1;

profMod = 2 + floor(level/5);

strMod = 0;
dexMod = 0;
conMod = 0;
intMod = 0;
wisMod = 0;

//Health variables
maxHitPoints = 4 + conMod + (level - 1) * (3 + conMod);
hitPoints = maxHitPoints;

//Attack variables
hitBonus = profMod + strMod;
attackType = "melee";
attackTarget = noone;
attackTimer = 0;

//Damage variables
damageDice = 4;
damageBonus = strMod;
damageType = "piercing";

//Defense variables
armorClass = 10 + dexMod;

//Move and action Variables
move = 6;
actions = 2;
canAct = false;

initiative = dexMod;
initRoll = 0;

//Pathing
movementPath = path_add();
path_set_kind(movementPath, 2);
path_set_closed(movementPath, false);   

moveSpeed = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state){
    case "begin path":
        //Begin moving
        path_start(movementPath, moveSpeed, 0 , true);
        
        state = "moving";
        
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Clear path
path_clear_points(movementPath);

state = "idle"

if(actions &gt; 0){
    obj_cursor.selectedActor = id;
    movement_range(map[gridX, gridY], move, actions);
    
    if(canAct){
        switch(attackType){
            case "ranged":
                ranged_attack_range(id);
                break;
        }
    }
    
}

else{
    obj_control.currentActor = noone;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If cursor is hovering over a different node than actor's
if(obj_cursor.selectedActor == id){ 
    if(obj_cursor.hoverNode != noone){
        tempNode = obj_cursor.hoverNode;
        if(tempNode.moveNode){
            current = tempNode;
        
            //Tracking line back to actor
            while(current.parent != noone){
                draw_line_width_colour(current.x + 32, current.y + 32, current.parent.x + 32, current.parent.y + 32, 4, c_lime, c_lime);
             
                current = current.parent;
            }
        }
        
        if(tempNode.attackNode){
            switch(attackType){
                case "ranged":
                    draw_line_width_colour(x + 32, y + 32, tempNode.x + 32, tempNode.y + 32, 4, c_purple, c_purple);
                    break;
            }
        }
    }
}


draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
